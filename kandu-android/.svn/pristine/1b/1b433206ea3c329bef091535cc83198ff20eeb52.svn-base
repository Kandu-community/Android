package com.inomma.kandu.ui.activities;

import java.util.ArrayList;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.app.Fragment;
import android.app.ProgressDialog;
import android.content.Intent;
import android.content.res.Configuration;
import android.location.Location;
import android.os.Bundle;
import android.support.v4.app.ActionBarDrawerToggle;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.Toast;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.inomma.SharedPreferencesHelper;
import com.inomma.Toaster;
import com.inomma.kandu.R;
import com.inomma.kandu.model.Config;
import com.inomma.kandu.model.UserForm;
import com.inomma.kandu.model.UserFormsHolder;
import com.inomma.kandu.server.ResponseHandler;
import com.inomma.kandu.server.request.GetConfigRequest;
import com.inomma.kandu.server.request.GetUserFormsRequest;
import com.inomma.kandu.server.request.SubmitFormRequest;
import com.inomma.kandu.server.responses.GetConfigResponse;
import com.inomma.kandu.server.responses.GetUserFormsResponse;
import com.inomma.kandu.server.responses.SubmitFormResponse;
import com.inomma.utils.NetworkUtils;

public class KanduActivity extends Activity
{
	private DrawerLayout mDrawerLayout;
	private ListView mDrawerList;
	private ActionBarDrawerToggle mDrawerToggle;
	private int syncTasksCount;

	private CharSequence mDrawerTitle;
	private CharSequence mTitle;
	private GoogleMap map;

	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_kandu);

		mTitle = mDrawerTitle = getTitle();

		mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
		mDrawerList = (ListView) findViewById(R.id.left_drawer);

		// set a custom shadow that overlays the main content when the drawer
		// opens
		mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow, GravityCompat.START);
		// set up the drawer's list view with items and click listener

		mDrawerList.setOnItemClickListener(new DrawerItemClickListener());

		// enable ActionBar app icon to behave as action to toggle nav drawer
		getActionBar().setDisplayHomeAsUpEnabled(true);
		getActionBar().setHomeButtonEnabled(true);

		// ActionBarDrawerToggle ties together the the proper interactions
		// between the sliding drawer and the action bar app icon
		mDrawerToggle = new ActionBarDrawerToggle(this, /* host Activity */
		mDrawerLayout, /* DrawerLayout object */
		R.drawable.ic_drawer, /* nav drawer image to replace 'Up' caret */
		R.string.drawer_open, /* "open drawer" description for accessibility */
		R.string.drawer_close /* "close drawer" description for accessibility */
		)
		{
			public void onDrawerClosed(View view)
			{
				getActionBar().setTitle(mTitle);
				invalidateOptionsMenu(); // creates call to
											// onPrepareOptionsMenu()
			}

			public void onDrawerOpened(View drawerView)
			{
				getActionBar().setTitle(mDrawerTitle);
				invalidateOptionsMenu(); // creates call to
											// onPrepareOptionsMenu()
			}
		};
		mDrawerLayout.setDrawerListener(mDrawerToggle);
		map = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
		map.setMyLocationEnabled(true);

		// if (savedInstanceState == null) {
		// selectItem(0);
		// }
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu)
	{
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.main, menu);
		return super.onCreateOptionsMenu(menu);
	}

	/* Called whenever we call invalidateOptionsMenu() */
	@Override
	public boolean onPrepareOptionsMenu(Menu menu)
	{
		boolean drawerOpen = mDrawerLayout.isDrawerOpen(mDrawerList);
		menu.findItem(R.id.action_sync).setVisible(!drawerOpen);
		return super.onPrepareOptionsMenu(menu);
	}

	@Override
	protected void onResume()
	{
		Location location = map.getMyLocation();

		if (location != null)
		{
			LatLng myLocation = new LatLng(location.getLatitude(), location.getLongitude());
			map.animateCamera(CameraUpdateFactory.newLatLngZoom(myLocation, 10));
		}
		super.onResume();
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item)
	{
		// The action bar home/up action should open or close the drawer.
		// ActionBarDrawerToggle will take care of this.
		if (mDrawerToggle.onOptionsItemSelected(item))
		{
			return true;
		}
		// Handle action buttons
		switch (item.getItemId())
		{
		case R.id.action_sync:
			// create intent to perform web search for this planet
			sync();
			return true;
		default:
			return super.onOptionsItemSelected(item);
		}
	}

	protected void sync()
	{
		if(!NetworkUtils.isNetworkAvailable())
		{
			Toaster.show(R.string.toast_network_unavailable, Toast.LENGTH_SHORT);
			return;
		}
		
		syncTasksCount = 0;
		final ProgressDialog pd = ProgressDialog.show(this, "", "Syncing");
		
		String savedForms = SharedPreferencesHelper.getStringData("saved-forms", null);
		Log.e("KanduActivity 179", "saved forms " + (savedForms == null ? "null" : savedForms));
		if(savedForms != null)
		{
			JSONArray savedJson;
			try
			{
				savedJson = new JSONArray(savedForms);
				Log.e("KanduActivity 186", "number of saved jsons " + savedJson.length());
				for(int i = 0; i < savedJson.length(); i++)
				{
					JSONObject formJson = savedJson.getJSONObject(i);
					SubmitFormRequest request = new SubmitFormRequest(formJson.getString("url"), null, new ResponseHandler<SubmitFormResponse>()
					{
						
						@Override
						public void handleResponse(SubmitFormResponse response)
						{
							Log.e("KanduActivity", "syncTasksvalue: " + syncTasksCount);
							runOnUiThread(new Runnable()
							{
								
								@Override
								public void run()
								{
									
									if(--syncTasksCount <= 0)
									{
										pd.dismiss();
										SharedPreferencesHelper.putStringData("saved-forms", "[]");
										syncFinished();
									}
								}
							});
						}
					});
					
					request.setBody(formJson.getJSONObject("params"));
					request.execute();
					
					syncTasksCount++;
				}
			} catch (JSONException e)
			{
				e.printStackTrace();
			}
			
		}
		
		new GetConfigRequest(new ResponseHandler<GetConfigResponse>()
		{

			@Override
			public void handleResponse(GetConfigResponse response)
			{
				final Config config = response.getConfig();
				new GetUserFormsRequest(new ResponseHandler<GetUserFormsResponse>()
				{
					@Override
					public void handleResponse(GetUserFormsResponse response)
					{
						UserFormsHolder.newInstance(config, response.getUserForms());
						Log.e("KanduActivity", "syncTasksvalue: " + syncTasksCount);
						if(--syncTasksCount <= 0)
						{
							runOnUiThread(new Runnable()
							{
								public void run()
								{
									pd.dismiss();
									SharedPreferencesHelper.putStringData("saved-forms", "[]");
									syncFinished();
								}
							});
						}
					}

				}).execute();

			}
		}).execute();
		syncTasksCount++;
		Log.e("KanduActivity 253", "synctaks count: " + syncTasksCount);

	}

	private void syncFinished()
	{
		List<String> arrayItems = new ArrayList<String>();
		for (UserForm form : UserFormsHolder.getInstance().getUserForms())
		{
			arrayItems.add(form.getVisibleName());
			arrayItems.add("Edit " + form.getVisibleName());
		}
		mDrawerList.setAdapter(new ArrayAdapter<String>(this, R.layout.drawer_list_item, arrayItems));

	}

	/* The click listner for ListView in the navigation drawer */
	private class DrawerItemClickListener implements ListView.OnItemClickListener
	{
		@Override
		public void onItemClick(AdapterView<?> parent, View view, int position, long id)
		{
			selectItem(position);
		}
	}

	private void selectItem(int position)
	{
		// update the main content by replacing fragments
		if (position % 2 == 0)
		{
			Intent intent = new Intent(this, FillFormActivity.class);
			intent.putExtra("userform", UserFormsHolder.getInstance().getUserForms().get(position / 2));
			startActivity(intent);
		} else
		{
			Intent intent = new Intent(this, SubmissionsActivity.class);
			intent.putExtra("userform", UserFormsHolder.getInstance().getUserForms().get(position / 2));
			startActivity(intent);
		}
	}

	@Override
	public void setTitle(CharSequence title)
	{
		mTitle = title;
		getActionBar().setTitle(mTitle);
	}

	/**
	 * When using the ActionBarDrawerToggle, you must call it during
	 * onPostCreate() and onConfigurationChanged()...
	 */

	@Override
	protected void onPostCreate(Bundle savedInstanceState)
	{
		super.onPostCreate(savedInstanceState);
		// Sync the toggle state after onRestoreInstanceState has occurred.
		mDrawerToggle.syncState();
	}

	@Override
	public void onConfigurationChanged(Configuration newConfig)
	{
		super.onConfigurationChanged(newConfig);
		// Pass any configuration change to the drawer toggls
		mDrawerToggle.onConfigurationChanged(newConfig);
	}

	/**
	 * Fragment that appears in the "content_frame", shows a planet
	 */
	public static class PlanetFragment extends Fragment
	{
		public static final String ARG_PLANET_NUMBER = "planet_number";

		public PlanetFragment()
		{
			// Empty constructor required for fragment subclasses
		}

		@Override
		public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
		{
			View rootView = inflater.inflate(R.layout.fragment_fill_form, container, false);
			// int i = getArguments().getInt(ARG_PLANET_NUMBER);
			// String planet =
			// getResources().getStringArray(R.array.planets_array)[i];
			//
			// int imageId =
			// getResources().getIdentifier(planet.toLowerCase(Locale.getDefault()),
			// "drawable", getActivity().getPackageName());
			// ((ImageView)
			// rootView.findViewById(R.id.image)).setImageResource(imageId);
			// getActivity().setTitle(planet);
			return rootView;
		}
	}
}
