package com.inomma.kandu.ui.views;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.location.Location;
import android.util.AttributeSet;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.Toast;

import com.inomma.Toaster;
import com.inomma.kandu.Utils;
import com.inomma.kandu.model.FormItem;
import com.inomma.kandu.model.UserForm;
import com.inomma.kandu.model.UserFormsHolder;
import com.inomma.utils.location.AdvancedLocationManager;

public class FormView extends LinearLayout {
	
	private UserForm form;
	
	private Map<String, FormItemView> views =new HashMap<String, FormItemView>();
	private FormItem locationFormItem;
	private JSONObject submissionsJson;
	private boolean isInline;
	public FormView(Context context) {
		super(context);
		fillContent();
	}


	public FormView(Context context, AttributeSet attrs) {
		super(context, attrs);
		fillContent();
	}

	public FormView(Context context, AttributeSet attrs, int defStyle) {
		super(context, attrs, defStyle);
		fillContent();
	}


	private void fillContent() {
		setOrientation(VERTICAL);
	}
	
	public void setData(UserForm userForm, JSONObject submissionJson){
		this.form = userForm;
		this.submissionsJson = submissionJson;
		createFields();
	}
	private void createFields() {
		List<FormItem> items = form.getForm().getFormItems();
		for (FormItem item : items) {
			FormItemView v = getViewForItem(item);
			if (v == null)
				continue;
			addView(v);
			views.put(item.getKey(),v);
		
			if(item.getVisibleWhen()!=null){
				Map<String, String> visibleWhen = item.getVisibleWhen();
				for(String key:visibleWhen.keySet()){
					View visibleWhenView = views.get(Utils.keyFromName(key));
					if(visibleWhenView instanceof FormItemChoiceView){
						((FormItemChoiceView)visibleWhenView).addVisibility(visibleWhen.get(key), v);
					}
				}
			}
		}

	}
	

	private FormItemView getViewForItem(FormItem item) {
		FormItemView view = null;
		String value = null;

		if (submissionsJson != null && submissionsJson.has(item.getKey())) {
			try {
				value = submissionsJson.getString(item.getKey());
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}

		switch (item.getFormItemType()) {
		case CHOICE:
			view = new FormItemSingleChoiceView(getContext(), item);
			break;
		case TEXT:
			view = new FormItemTextView(getContext(), item);
			if (value != null)
				view.setValue(value);
			break;
		case NUMBER:
			view = new FormItemNumberView(getContext(), item);
			if (value != null)
				view.setValue(value);
			break;
		case DECIMAL:
			view = new FormItemDecimalView(getContext(), item);
			if (value != null)
				view.setValue(value);
			break;
		case MULTICHOICE:
			view = new FormItemMultiChoiceView(getContext(), item);
			break;
		case GPS:
			startGpsTracking(item);
			break;
		case IMAGE:
			view = new FormItemFileView((Activity)getContext(), item);//TODO: needs better
			break;
		case FOREIGN_KEY:
			if(!isInline){
				view = new FormItemAutocompleteView(getContext(), item,UserFormsHolder.getInstance().getUserFormWithKey(item.getLinkTo()));
			
			}
			
			break;
		case MANY_TO_MANY:
			if(!isInline){
				view = new FormItemManyToManyView(getContext(), item,UserFormsHolder.getInstance().getUserFormWithKey(item.getLinkTo()));
			
			}
			
			break;
		default:
			
			break;
		}

		return view;
	}

	private void startGpsTracking(FormItem locationFormItem) {
		this.locationFormItem = locationFormItem;
		AdvancedLocationManager.getInstance().start();
	}

	public Map<String,Object> getParams(){
		Map<String, Object> params = new HashMap<String, Object>();
		for (FormItemView view : views.values()) {
			FormItem formItem = ((FormItem) view.getTag());
			Object value = view.getValue();
			if (formItem.isRequired() && value == null) {
				Toaster.show(formItem.getVisibleName() + " is required",
						Toast.LENGTH_SHORT);
				return null;
			}
			if (value instanceof File) {
				params.put(formItem.getKey(), value);
			} else if (value instanceof String)
				params.put(formItem.getKey(), value);
			else if (value instanceof List) {

				params.put(formItem.getKey(),
						Utils.stringFromList((List) value));
			}
			else{
				params.put(formItem.getKey(), value);
			}
		}
		if (locationFormItem != null) {
			Location location = AdvancedLocationManager.getInstance()
					.getCurrentBestLocation();
			if (location != null) {
				String locStr = location.getLatitude() + ","
						+ location.getLongitude();
				params.put(locationFormItem.getKey(), locStr);
				params.put(locationFormItem.getKey(), locStr);

			}
		}
		return params;
	}
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		try {
			FormItemFileView view = (FormItemFileView) findViewById(requestCode);
			view.onActivityResult(requestCode, resultCode, data);
		} catch (ClassCastException e) {

		}
	}


	public boolean isInline() {
		return isInline;
	}


	public void setInline(boolean isInline) {
		this.isInline = isInline;
	}
}
