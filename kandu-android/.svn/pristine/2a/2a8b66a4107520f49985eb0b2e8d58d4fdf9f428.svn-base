package com.inomma.kandu.ui.activities;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.content.Intent;
import android.location.Location;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.ViewGroup;
import android.widget.Toast;

import com.inomma.SharedPreferencesHelper;
import com.inomma.Toaster;
import com.inomma.kandu.R;
import com.inomma.kandu.model.FormItem;
import com.inomma.kandu.model.UserForm;
import com.inomma.kandu.server.ResponseHandler;
import com.inomma.kandu.server.request.SubmitFormRequest;
import com.inomma.kandu.server.responses.SubmitFormResponse;
import com.inomma.kandu.ui.views.FormItemFileView;
import com.inomma.kandu.ui.views.FormItemMultiChoiceView;
import com.inomma.kandu.ui.views.FormItemNumberView;
import com.inomma.kandu.ui.views.FormItemSingleChoiceView;
import com.inomma.kandu.ui.views.FormItemTextView;
import com.inomma.kandu.ui.views.FormItemView;
import com.inomma.utils.NetworkUtils;
import com.inomma.utils.location.AdvancedLocationManager;

public class FillFormActivity extends Activity
{

	private UserForm form;

	private ViewGroup mainLayout;
	private List<FormItemView> views;
	private FormItem locationFormItem;
	private JSONObject submissionsJson;

	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_fill_form);
		views = new ArrayList<FormItemView>();
		this.form = (UserForm) getIntent().getExtras().getSerializable("userform");
		if (getIntent().getExtras().containsKey("submission"))
		{
			try
			{
				this.submissionsJson = new JSONObject(getIntent().getExtras().getString("submission"));
			} catch (JSONException e)
			{
				e.printStackTrace();
			}
		}
		this.mainLayout = (ViewGroup) findViewById(R.id.main_layout);
		getActionBar().setTitle(this.form.getVisibleName());
		createFields();
		getActionBar().setDisplayHomeAsUpEnabled(true);
	}

	private void createFields()
	{
		List<FormItem> items = form.getForm().getFormItems();
		for (FormItem item : items)
		{
			FormItemView v = getViewForItem(item);
			if (v == null)
				continue;
			this.mainLayout.addView(v);
			views.add(v);
		}

	}

	private FormItemView getViewForItem(FormItem item)
	{
		FormItemView view = null;
		String value = null;

		if (submissionsJson != null && submissionsJson.has(item.getKey()))
		{
			try
			{
				value = submissionsJson.getString(item.getKey());
			} catch (JSONException e)
			{
				e.printStackTrace();
			}
		}

		switch (item.getFormItemType())
		{
		case CHOICE:
			view = new FormItemSingleChoiceView(this, item);
		case TEXT:
			view = new FormItemTextView(this, item);
			if (value != null)
				view.setValue(value);
			break;
		case NUMBER:
			view = new FormItemNumberView(this, item);
			if (value != null)
				view.setValue(value);
			break;
		case MULTICHOICE:
			view = new FormItemMultiChoiceView(this, item);
		case GPS:
			startGpsTracking(item);
		default:
			break;
		}

		return view;
	}

	private void startGpsTracking(FormItem locationFormItem)
	{
		this.locationFormItem = locationFormItem;
		AdvancedLocationManager.getInstance().start();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu)
	{
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.fill_form, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item)
	{
		// The action bar home/up action should open or close the drawer.
		// ActionBarDrawerToggle will take care of this.

		// Handle action buttons
		switch (item.getItemId())
		{
		case R.id.action_submit:
			// create intent to perform web search for this planet
			submit();
			return true;
		case android.R.id.home:
			onBackPressed();
			return true;

		default:
			return super.onOptionsItemSelected(item);
		}
	}

	public void submit()
	{
		JSONObject params = new JSONObject();
		for (FormItemView view : views)
		{
			FormItem formItem = ((FormItem) view.getTag());
			Object value = view.getValue();
			if (formItem.isRequired() && value == null)
			{
				Toaster.show(formItem.getVisibleName() + " is required", Toast.LENGTH_SHORT);
				return;
			}
			try
			{
				if (value instanceof String)
					params.put(formItem.getKey(), value);
				else if (value instanceof ArrayList)
				{
					ArrayList valueArray = (ArrayList) value;
					JSONArray jsonArray = new JSONArray();
					for (Object obj : valueArray)
						jsonArray.put(obj);
					params.put(formItem.getKey(), jsonArray);
				} else if (value instanceof File)
				{
					//TODO
				}
			} catch (JSONException e)
			{
				e.printStackTrace();
			}
		}
		if (locationFormItem != null)
		{
			Location location = AdvancedLocationManager.getInstance().getCurrentBestLocation();
			if (location != null)
			{
				String locStr = location.getLatitude() + "," + location.getLongitude();
				try
				{
					params.put(locationFormItem.getKey(), locStr);
					params.put(locationFormItem.getKey(), locStr);
				} catch (JSONException e)
				{
					e.printStackTrace();
				}

			}
		}
		
		if(!NetworkUtils.isNetworkAvailable())
		{
			String savedForms = SharedPreferencesHelper.getStringData("saved-forms", null);
			if(savedForms == null)
				savedForms = "[]";
			Log.e("FillFormActivity 210", "saved forms:\n" + savedForms);
			try
			{
				JSONArray savedJson = new JSONArray(savedForms);

				JSONObject formJson = new JSONObject();
				formJson.put("url", form.getUrl());
				formJson.put("params", params);
				
				savedJson.put(formJson);
				SharedPreferencesHelper.putStringData("saved-forms", savedJson.toString());
				Toaster.show("Form saved to disc. Sync to submit", Toast.LENGTH_SHORT);
				finish();
			} catch (JSONException e)
			{
				e.printStackTrace();
			}
			return;
		}

		SubmitFormRequest request = new SubmitFormRequest(form.getUrl(), null, new ResponseHandler<SubmitFormResponse>()
		{
			
			@Override
			public void handleResponse(SubmitFormResponse response)
			{
				runOnUiThread(new Runnable()
				{
					
					@Override
					public void run()
					{
						Toast.makeText(FillFormActivity.this, "Successfully Submitted", Toast.LENGTH_SHORT).show();
						finish();
					}
				});
			}
		});
		
		request.setBody(params);
		request.execute();
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data)
	{
		try
		{
			FormItemFileView view = (FormItemFileView) findViewById(requestCode);
			//it was a FileFormItemView
			File file = new File(data.getDataString());
			view.setValue(file);
		}
		catch(ClassCastException e)
		{
			
		}
	}
}
