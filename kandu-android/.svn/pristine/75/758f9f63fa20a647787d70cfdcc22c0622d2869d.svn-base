package com.inomma.kandu.ui.activities;

import java.util.ArrayList;
import java.util.List;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.Toast;

import com.inomma.Toaster;
import com.inomma.kandu.R;
import com.inomma.kandu.model.FormCacheManager;
import com.inomma.kandu.model.FormSubmission;
import com.inomma.kandu.model.SmallFormSubmission;
import com.inomma.kandu.model.UserForm;
import com.inomma.kandu.server.FormSubmitter;
import com.inomma.kandu.server.FormSubmitter.FormSubmissionListener;
import com.inomma.kandu.ui.views.FormView;

public class FillFormActivity extends Activity {

	private UserForm form;

	private ViewGroup mainLayout;

	private FormSubmission formSubmission;
	private List<FormView> inlineForms = new ArrayList<FormView>();
	private UserForm inlineForm;
	private FormView mainView;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_fill_form);
		this.form = (UserForm) getIntent().getExtras().getSerializable(
				"userform");
		if (getIntent().getExtras().containsKey("submission")) {

			this.formSubmission = (FormSubmission) getIntent().getExtras()
					.getSerializable("submission");

		}
		this.mainLayout = (ViewGroup) findViewById(R.id.main_layout);
		mainView = new FormView(this);
		mainView.setData(form, formSubmission!=null?formSubmission.getSmallFormSubmission():null);
		this.mainLayout.addView(mainView);
		fillInlineForms();
		getActionBar().setTitle(this.form.getVisibleName());
		getActionBar().setDisplayHomeAsUpEnabled(true);

	}

	private void fillInlineForms() {
		for (UserForm inline : form.getInlineForms()) {
			inlineForm = inline;
			FormView inlineFormView = new FormView(this);
			inlineFormView.setInline(true);

			inlineFormView.setData(inline,
					formSubmission.getInlineFormSubmission(inline.getKey()));
			inlineForms.add(inlineFormView);
			mainLayout.addView(inlineFormView);
			break;
		}
		Button button = new Button(this);
		button.setText("Add another");
		mainLayout.addView(button);
		button.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				FormView inlineFormView = new FormView(FillFormActivity.this);
				inlineFormView.setInline(true);

				inlineFormView.setData(inlineForm, null);
				inlineForms.add(inlineFormView);
				mainLayout.addView(inlineFormView,
						mainLayout.getChildCount() - 1);

			}
		});
		if (inlineForms.size() == 0) {
			button.setVisibility(View.GONE);
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.fill_form, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// The action bar home/up action should open or close the drawer.
		// ActionBarDrawerToggle will take care of this.

		// Handle action buttons
		switch (item.getItemId()) {
		case R.id.action_submit:
			// create intent to perform web search for this planet
			showSaveChoices();
			return true;
		case android.R.id.home:
			onBackPressed();
			return true;

		default:
			return super.onOptionsItemSelected(item);
		}
	}

	private void showSaveChoices() {
		AlertDialog.Builder builder = new AlertDialog.Builder(this);
		builder.setTitle("Select date");
		builder.setItems(new String[] { "Save and Submit", " Save Only" },
				new DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						if (which == 0) {
							submit();
						} else {
							saveOnly();
						}
					}

				});
		AlertDialog alertDialog = builder.create();
		alertDialog.show();
	}

	private void saveOnly() {
//		Map<String, Object> params = mainView.getParams();
//		if (params == null) {
//			return;
//		}
//		try {
//			JSONObject jsonObject = Utils.mapToJsonObject(params);
//
//			for (FormView inlineFormView : inlineForms) {
//				Map<String, Object> inlineParams = inlineFormView.getParams();
//				if (params == null) {
//					return;
//				}
//				JSONObject inlineJsonObject = Utils
//						.mapToJsonObject(inlineParams);
//				jsonObject.put(inlineForm.getKey(), inlineJsonObject);
//
//			}
//
//			String formSubmissions = SharedPreferencesHelper.getStringData(
//					form.getKey(), null);
//			JSONArray savedForms = null;
//			if (formSubmissions != null) {
//				savedForms = new JSONArray(formSubmissions);
//			} else {
//				savedForms = new JSONArray();
//			}
//			savedForms.put(jsonObject);
//			SharedPreferencesHelper.putStringData(form.getKey(),
//					savedForms.toString());
//			Toaster.show("Saved succesfull", Toast.LENGTH_SHORT);
//			finish();
//
//		} catch (JSONException e) {
//			e.printStackTrace();
//		}

		FormSubmission formSubmission = getFinalFormSubmission();
		if(formSubmission.getUniqueId()!=null){
			FormCacheManager.getInstance().replaceInCache(formSubmission);

		}
		else{
			FormCacheManager.getInstance().addToCache(formSubmission);

		}
		Toaster.show("Saved succesfully", Toast.LENGTH_SHORT);
		finish();
//		finish();
	}

	public void submit() {
		
		new FormSubmitter(getFinalFormSubmission(), this, new FormSubmissionListener() {
			
			@Override
			public void formSubmitted(String errorMessage) {
				if(errorMessage==null){
					if(formSubmission!=null && formSubmission.getId()==null && formSubmission.getUniqueId()!=null){
						FormCacheManager.getInstance().deleteFromCache(formSubmission);;
					}
					Toast.makeText(FillFormActivity.this, "Submitted",
							Toast.LENGTH_SHORT).show();
					finish();
				}
				else{
					Toast.makeText(FillFormActivity.this, errorMessage,
							Toast.LENGTH_SHORT).show();
				}
				
				
			}
		}).submitForm();
//		Map<String, Object> params = mainView.getParams();
//		if (params == null) {
//			return;
//		}
//
//		if (!NetworkUtils.isNetworkAvailable()) {
//			Toaster.show("Network is not available, please do save only",
//					Toast.LENGTH_SHORT);
//			return;
//		}
//
//		new SubmitFormRequest(this, form.getUrl(), params,
//				new ResponseHandler<SubmitFormResponse>() {
//
//					@Override
//					public void handleResponse(SubmitFormResponse response) {
//						if (response.id == null) {
//							Toast.makeText(FillFormActivity.this,
//									"Server error", Toast.LENGTH_SHORT).show();
//							return;
//						}
//						if (inlineForms.size() != 0) {
//							submitInlineForms(response.id);
//
//						} else {
//							Toast.makeText(FillFormActivity.this, "Submitted",
//									Toast.LENGTH_SHORT).show();
//							finish();
//						}
//
//					}
//				}).execute();

	}

	protected void submitInlineForms(int id) {
//		for (FormView inlineFormView : inlineForms) {
//			Map<String, Object> params = inlineFormView.getParams();
//			if (params == null) {
//				return;
//			}
//			params.put(form.getKey(), id + "");
//
//			new SubmitFormRequest(this, inlineForm.getUrl(), params,
//					new ResponseHandler<SubmitFormResponse>() {
//
//						@Override
//						public void handleResponse(SubmitFormResponse response) {
//							Toast.makeText(FillFormActivity.this, "Submitted",
//									Toast.LENGTH_SHORT).show();
//							finish();
//
//						}
//					}).execute();
//		}
//	
	
	}
	private FormSubmission getFinalFormSubmission(){
		SmallFormSubmission mainFormSubmission = mainView.getSubmission();
		FormSubmission formSubmission = new  FormSubmission(this.form);
		
		formSubmission.setSmallFormSubmission(mainFormSubmission);
		
		for (FormView inlineFormView : inlineForms) {
			SmallFormSubmission inlineFormSubmission = inlineFormView.getSubmission();
			formSubmission.putInlineSmallFormSubmission(inlineForm.getKey(), inlineFormSubmission);
		}
		if(this.formSubmission!=null){
			formSubmission.setUniqueId(this.formSubmission.getUniqueId());
		}
		return formSubmission;
		
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		try {
			mainView.onActivityResult(requestCode, resultCode, data);
		} catch (ClassCastException e) {
			e.printStackTrace();
		}
	}

}
