package com.inomma.kandu.ui.activities;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.Toast;

import com.inomma.SharedPreferencesHelper;
import com.inomma.Toaster;
import com.inomma.kandu.R;
import com.inomma.kandu.model.UserForm;
import com.inomma.kandu.server.ResponseHandler;
import com.inomma.kandu.server.request.SubmitFormRequest;
import com.inomma.kandu.server.responses.SubmitFormResponse;
import com.inomma.kandu.ui.views.FormView;
import com.inomma.utils.NetworkUtils;

public class FillFormActivity extends Activity {

	private UserForm form;

	private ViewGroup mainLayout;

	private JSONObject submissionsJson;
	private List<FormView> inlineForms = new ArrayList<FormView>();
	private UserForm inlineForm;
	private FormView mainView;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_fill_form);
		this.form = (UserForm) getIntent().getExtras().getSerializable(
				"userform");
		if (getIntent().getExtras().containsKey("submission")) {
			try {
				this.submissionsJson = new JSONObject(getIntent().getExtras()
						.getString("submission"));
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
		this.mainLayout = (ViewGroup) findViewById(R.id.main_layout);
		mainView = new FormView(this);
		mainView.setData(form, submissionsJson);
		this.mainLayout.addView(mainView);
		fillInlineForms();
		getActionBar().setTitle(this.form.getVisibleName());
		// createFields();
		getActionBar().setDisplayHomeAsUpEnabled(true);

	}

	private void fillInlineForms() {
		for (UserForm inline : form.getInlineForms()) {
			inlineForm = inline;
			FormView inlineFormView = new FormView(this);
			inlineFormView.setInline(true);

			inlineFormView.setData(inline, null);

			inlineForms.add(inlineFormView);
			mainLayout.addView(inlineFormView);
			break;
		}
		Button button = new Button(this);
		button.setText("Add another");
		mainLayout.addView(button);
		button.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				FormView inlineFormView = new FormView(FillFormActivity.this);
				inlineFormView.setInline(true);

				inlineFormView.setData(inlineForm, null);
				inlineForms.add(inlineFormView);
				mainLayout.addView(inlineFormView,
						mainLayout.getChildCount() - 1);

			}
		});
		if (inlineForms.size() == 0) {
			button.setVisibility(View.GONE);
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.fill_form, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// The action bar home/up action should open or close the drawer.
		// ActionBarDrawerToggle will take care of this.

		// Handle action buttons
		switch (item.getItemId()) {
		case R.id.action_submit:
			// create intent to perform web search for this planet
			showSaveChoices();
			return true;
		case android.R.id.home:
			onBackPressed();
			return true;

		default:
			return super.onOptionsItemSelected(item);
		}
	}

	private void showSaveChoices() {
		AlertDialog.Builder builder = new AlertDialog.Builder(this);
		builder.setTitle("Select date");
		builder.setItems(new String[] { "Save and Submit", " Save Only" },
				new DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						if (which == 0) {
							submit();
						} else {
							finish();
						}
					}
				});
		AlertDialog alertDialog = builder.create();
		alertDialog.show();
	}

	public void submit() {
		Map<String, Object> params = mainView.getParams();
		if (params == null) {
			return;
		}

		if (!NetworkUtils.isNetworkAvailable()) {
			String savedForms = SharedPreferencesHelper.getStringData(
					"saved-forms", null);
			if (savedForms == null)
				savedForms = "[]";
			Log.e("FillFormActivity 210", "saved forms:\n" + savedForms);
			try {
				JSONArray savedJson = new JSONArray(savedForms);

				JSONObject formJson = new JSONObject();
				formJson.put("url", form.getUrl());
				formJson.put("params", params);

				savedJson.put(formJson);
				SharedPreferencesHelper.putStringData("saved-forms",
						savedJson.toString());
				Toaster.show("Form saved to disc. Sync to submit",
						Toast.LENGTH_SHORT);
				finish();
			} catch (JSONException e) {
				e.printStackTrace();
			}
			return;
		}

		new SubmitFormRequest(this, form.getUrl(), params,
				new ResponseHandler<SubmitFormResponse>() {

					@Override
					public void handleResponse(SubmitFormResponse response) {
						if (response.id == null) {
							Toast.makeText(FillFormActivity.this,
									"Server error", Toast.LENGTH_SHORT).show();
							return;
						}
						if (inlineForms.size() != 0) {
							submitInlineForms(response.id);

						} else {
							Toast.makeText(FillFormActivity.this, "Submitted",
									Toast.LENGTH_SHORT).show();
							finish();
						}

					}
				}).execute();

	}

	protected void submitInlineForms(int id) {
		for (FormView inlineFormView : inlineForms) {
			Map<String, Object> params = inlineFormView.getParams();
			if (params == null) {
				return;
			}
			params.put(form.getKey(), id);

			new SubmitFormRequest(this, inlineForm.getUrl(), params,
					new ResponseHandler<SubmitFormResponse>() {

						@Override
						public void handleResponse(SubmitFormResponse response) {
							Toast.makeText(FillFormActivity.this,
									"Submitted Order", Toast.LENGTH_SHORT)
									.show();

						}
					}).execute();
		}
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		try {

			mainView.onActivityResult(requestCode, resultCode, data);
		} catch (ClassCastException e) {

		}
	}
}
